use std::fs;

// 0x050 - 0x09F
const FONT_START: usize = 0x050;
const FONT: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub const ROM_START: u16 = 0x200;

pub struct Heap {
    mem: [u8; 4096],
}

impl Heap {
    pub fn new() -> Heap {
        Heap { mem: [0; 4096] }
    }

    pub fn set_byte(&mut self, addr: usize, value: u8) {
        self.mem[addr] = value;
    }

    pub fn load_font(&mut self) {
        for (i, byte) in FONT.into_iter().enumerate() {
            self.mem[FONT_START + i] = byte;
        }
    }

    pub fn load_rom(&mut self, rom_path: &String) {
        for (i, b) in fs::read(rom_path).unwrap().into_iter().enumerate() {
            self.mem[ROM_START as usize + i] = b;
        }
    }

    pub fn fetch_op(&self, address: usize) -> u16 {
        (self.mem[address] as u16) << 8 | (self.mem[address + 1] as u16)
    }
}
