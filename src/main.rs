// 0x050 - 0x09F
const FONT: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

fn main() {
    let mut heap: [u8; 4096] = [0x0; 4096];
    let _pc: u16;
    let _i: u16;
    let _stack: [u16; 64];
    let _frame_buffer: [[bool; 64]; 32];
    let _delay: u8;
    let _sound: u8;
    let _registers: [u8; 16];

    load_font(&mut heap);
    let byte = &heap[0x051];
    println!("The byte is {}", byte);
}

fn load_font(heap: &mut [u8; 4096]) {
    for (i, byte) in FONT.iter().enumerate() {
        heap[0x050 + i] = *byte;
    }
}

fn write_byte(heap: &mut [u8; 4096], address: u8, byte: u8) {
    heap[address as usize] = byte;
}
